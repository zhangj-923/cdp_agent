package common

import (
	"encoding/json"
	io "io/ioutil"
	"sync"
)

var lock = new(sync.RWMutex)

type JsonStruct struct {
}

func NewJsonStruct() *JsonStruct {
	return &JsonStruct{}
}

//json文件读取，filePath文件路径 文件接收
func (*JsonStruct) readfile(filePath string, v interface{}) {
	lock.Lock()
	data, err := io.ReadFile(filePath) //ReadFile函数会读取文件的全部内容，并将结果以[]byte类型返回
	if err != nil {
		Info.Println(err)
		return
	}
	lock.Unlock()

	err = json.Unmarshal([]byte(data), v)
	if err != nil {
		Info.Println(err)
		return
	}
}

type Conf struct {
}
type AutoGenerated struct {
	IsMock       bool       `json:"isMock"`
	IsEncrypt    bool       `json:"isEncrypt"`
	AgentCycle   int        `json:"agentCycle"`
	IntervalTime int        `json:"interval_time"`
	Endpoint     []Endpoint `json:"endpoint"`
	Mysql        Mysql      `json:"mysql"`
	Influxdb     Influxdb   `json:"influxdb"`
	Kafka        Kafka      `json:"kafka"`
	ServicePort  int        `json:"service_port"`
}
type Endpoint struct {
	EntityID  int    `json:"entity_id"`
	IPAddress string `json:"ipAddress"`
	Port      int    `json:"port"`
	Username  string `json:"username"`
	Password  string `json:"password"`
}
type Mysql struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Dbname   string `json:"dbname"`
}
type Influxdb struct {
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Username string `json:"username"`
	Password string `json:"password"`
	Database string `json:"database"`
}

type Kafka struct {
	Brokers string `json:"brokers"`
	Topic   string `json:"topic"`
}

var AutoGenConf *AutoGenerated

//生成实体全局对象
func (*Conf) GetModel(filePath string) {
	JsonStruct := JsonStruct{}
	q := AutoGenerated{}
	JsonStruct.readfile(filePath, &q)
	AutoGenConf = &q
}

func (*Conf) GetModelClass(filePath string) (a *AutoGenerated) {
	JsonStruct := JsonStruct{}
	q := AutoGenerated{}
	JsonStruct.readfile(filePath, &q)
	return &q
}
